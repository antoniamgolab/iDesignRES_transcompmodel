var documenterSearchIndex = {"docs":
[{"location":"manual/types_and_functions/#Type-and-functions","page":"Types and functions","title":"Type and functions","text":"","category":"section"},{"location":"manual/types_and_functions/","page":"Types and functions","title":"Types and functions","text":"Modules = [TransComp]","category":"page"},{"location":"manual/types_and_functions/#Main.TransComp.Edge","page":"Types and functions","title":"Main.TransComp.Edge","text":"Edge\n\nAn 'Edge' represents a connection between two nodes and is a representation of connecting transport infrastructure.\n\nFields\n\nid::Int: unique identifier of the edge\nname::String: name of the connection\nlength::Float64: length of the connection in km\nfrom::Node: the node from which the edge starts\nto::Node: the node to which the edge ends\ncarbon_price::Array{Float64,1}: carbon price in €/tCO2 for each year\n\n\n\n\n\n","category":"type"},{"location":"manual/types_and_functions/#Main.TransComp.Emission_constraints_by_mode","page":"Types and functions","title":"Main.TransComp.Emission_constraints_by_mode","text":"Emission_constraints_by_mode\n\nAn 'Emissionconstraintsby_mode' describes emissions constrained for a mode.\n\nFields\n\nid::Int: unique identifier of the emission constraint\nmode::Mode: mode of transport\nemission::Float64: emission constraint of the vehicle type (tCO2/year)\nyear::Int: year of the expected emission constraint\n\n\n\n\n\n","category":"type"},{"location":"manual/types_and_functions/#Main.TransComp.Emission_constraints_by_year","page":"Types and functions","title":"Main.TransComp.Emission_constraints_by_year","text":"Emission_constraints_by_year\n\nAn 'Emissionconstraintsby_year' describes an emission goal for a specific year for the total emissions.\n\nFields\n\nid::Int: unique identifier of the emission constraint\nemission::Float64: emission constraint\nyear::Int: year of the expected emission constraint\n\n\n\n\n\n","category":"type"},{"location":"manual/types_and_functions/#Main.TransComp.FinancialStatus","page":"Types and functions","title":"Main.TransComp.FinancialStatus","text":"FinancialStatus\n\nA 'FinancialStatus' describes a demographic group based on what there average budget for transportation-related expenses is.\n\nFields\n\nid::Int: unique identifier of the financial status\nname::String: name of the financial status\nVoT: value of time in €/h\nmonetary_budget_operational: budget for operational costs in €/year\nmonetary_budget_operational_lb: lower bound of the budget for operational costs in €/year\nmonetary_budget_operational_ub: upper bound of the budget for operational costs in €/year\nmonetary_budget_purchase: budget for purchasing costs in €/year\nmonetary_budget_purchase_lb: lower bound of the budget for purchasing costs in €/year\nmonetary_budget_purchase_ub: upper bound of the budget for purchasing costs in €/year\n\n\n\n\n\n","category":"type"},{"location":"manual/types_and_functions/#Main.TransComp.Fuel","page":"Types and functions","title":"Main.TransComp.Fuel","text":"Fuel\n\nA 'Fuel' represents the energy source used for the vehicle propulsion. \n\nFields\n\nid::Int: unique identifier of the fuel\nname::String: name of the fuel\nemission_factor::Float64: emission factor of the fuel in gCO2/kWh\ncost_per_kWh: cost per kWh of the fuel in €\ncost_per_kW: cost per kW of the fuel in €\nfueling_infrastructure_om_costs::Array{Float64,1}: fueling infrastructure operation and maintenance costs in €/year\n\n\n\n\n\n","category":"type"},{"location":"manual/types_and_functions/#Main.TransComp.GeographicElement","page":"Types and functions","title":"Main.TransComp.GeographicElement","text":"GeographicElement\n\nA 'Graph_item' represents a graph item that is either a node or an edge.\n\nFields\n\nid::Int: unique identifier of the graph item\ntype::String: type of the graph item (either 'node' or 'edge')\nname::String: name of the graph item\ncarbon_price::Array{Float64,1}: carbon price in €/tCO2 for each year\nfrom::Node: the node from which the edge starts\nto::Node: the node to which the edge ends\nlength::Float64: length of the connection in km\n\n\n\n\n\n","category":"type"},{"location":"manual/types_and_functions/#Main.TransComp.InitialFuelingInfr","page":"Types and functions","title":"Main.TransComp.InitialFuelingInfr","text":"InitialFuelingInfr\n\nAn 'InitialFuelingInfr' represents the fueling infrastructure that exists at the initial year of the optimization horizon.\n\nFields\n\nid::Int: unique identifier of the initial fueling infrastructure\ntechnology::Technology: technology of the fueling infrastructure\nallocation: allocation of the fueling infrastructure\ninstalled_kW::Float64: installed capacity of the fueling infrastructure in kW\n\n\n\n\n\n","category":"type"},{"location":"manual/types_and_functions/#Main.TransComp.InitialModeInfr","page":"Types and functions","title":"Main.TransComp.InitialModeInfr","text":"InitialModeInfr\n\nAn 'InitialModeInfr' represents the mode infrastructure that exists at the initial year of the optimization horizon.\n\nFields\n\nid::Int: unique identifier of the initial mode infrastructure\nmode::Mode: mode of transport\nallocation: allocation of the mode infrastructure\ninstalled_ukm::Float64: installed transport capacity of the mode infrastructure in Ukm\n\n\n\n\n\n","category":"type"},{"location":"manual/types_and_functions/#Main.TransComp.InitialVehicleStock","page":"Types and functions","title":"Main.TransComp.InitialVehicleStock","text":"InitialVehicleStock\n\nAn 'InitialVehicleStock' represents a vehicle fleet that exisits at the initial year of the optimization horizon.\n\nFields\n\nid::Int: unique identifier of the initial vehicle stock\ntechvehicle::TechVehicle: vehicle type and technology of the vehicle\nyear_of_purchase::Int: year in which the vehicle was purchased\nstock::Float64: number of vehicles of this type in the initial vehicle stock\n\n\n\n\n\n","category":"type"},{"location":"manual/types_and_functions/#Main.TransComp.Mode","page":"Types and functions","title":"Main.TransComp.Mode","text":"Mode\n\nA 'Mode' represents a transport mode. Transport modes may differ either by the infrastructure used (for example, road vs. rail) or by the used vehicle type (for example, private passenger car vs. bus) that directly influences the travel time but excludes a differentiation based on technology.\n\nFields\n\nid::Int: unique identifier of the mode\nname::String: name of the mode\nquantify_by_vehs::Bool: if for this mode vehicles stock is sized or not. If this mode is considered with levelized costs, including the costs for vehicles and related costs.\ncost_per_ukm::Array{Float64, 1}: cost per km in €/km (only relevant when quantifybyvehs is false) \nemission_factor::Array{Float64,1}: emission factor of the mode in gCO2/ukm (only relevant when quantifybyvehs is false)\ninfrastructure_expansion_costs::Array{Float64,1}: infrastructure expansion costs in € (only relevant when quantifybyvehs is false)\ninfrastructure_om_costs::Array{Float64,1}: infrastructure operation and maintenance costs in €/year (only relevant when quantifybyvehs is false)\nwaiting_time::Array{Float64,1}: waiting time in h\n\n\n\n\n\n","category":"type"},{"location":"manual/types_and_functions/#Main.TransComp.Mode_share_max","page":"Types and functions","title":"Main.TransComp.Mode_share_max","text":"Mode_share_max\n\nMaximum mode shares of a transport mode independent of year, i.e. over total horizon.\n\nFields\n\nid::Int: unique identifier of the mode share\nmode::Mode: mode of transport\nshare::Float64: maximum share of the mode\nfinancial_status::Array{FinancialStatus, 1}: array of financial status that is affected by this mode share constraint\nregion_type::Array{Regiontype,1}: array of region types that are affected by this TechVehicle share constraint\n\n\n\n\n\n","category":"type"},{"location":"manual/types_and_functions/#Main.TransComp.Mode_share_max_by_year","page":"Types and functions","title":"Main.TransComp.Mode_share_max_by_year","text":"Mode_share_max_by_year\n\nMaximum mode shares of a transport mode in a specific year.\n\nFields\n\nid::Int: unique identifier of the mode share\nmode::Mode: mode of transport\nshare::Float64: maximum share of the mode\nyear::Int: year of the maximum mode share\nregion_type::Array{Regiontype,1}: array of region types that are affected by this TechVehicle share constraint\n\n\n\n\n\n","category":"type"},{"location":"manual/types_and_functions/#Main.TransComp.Mode_share_min","page":"Types and functions","title":"Main.TransComp.Mode_share_min","text":"Mode_share_min\n\nMaximum mode shares of a transport mode independent of year, i.e. over total horizon.\n\nFields\n\nid::Int: unique identifier of the mode share\nmode::Mode: mode of transport\nshare::Float64: maximum share of the mode\nfinancial_status::Array{FinancialStatus, 1}: array of financial status that is affected by this mode share constraint\nregion_type::Array{Regiontype,1}: array of region types that are affected by this TechVehicle share constraint\n\n\n\n\n\n","category":"type"},{"location":"manual/types_and_functions/#Main.TransComp.Mode_share_min_by_year","page":"Types and functions","title":"Main.TransComp.Mode_share_min_by_year","text":"Mode_share_min_by_year\n\nMinimum mode shares of a transport mode in a specific year.\n\nFields\n\nid::Int: unique identifier of the mode share\nmode::Mode: mode of transport\nshare::Float64: minimum share of the mode\nyear::Int: year of the minimum mode share\nregion_type::Array{Regiontype,1}: array of region types that are affected by this TechVehicle share constraint\n\n\n\n\n\n","category":"type"},{"location":"manual/types_and_functions/#Main.TransComp.Node","page":"Types and functions","title":"Main.TransComp.Node","text":"Node\n\nA 'Node' represents geographic region. \n\nFields\n\nid::Int: unique identifier of the node\nname::String: name the region\ncarbon_price::Array{Float64,1}: carbon price in €/tCO2 for each year\n\n\n\n\n\n","category":"type"},{"location":"manual/types_and_functions/#Main.TransComp.Odpair","page":"Types and functions","title":"Main.TransComp.Odpair","text":"Odpair\n\nAn 'Odpair' describes transport demand. It may take place between two regions but origin and destination may al so \n\nFields\n\nid::Int: unique identifier of the odpair\norigin::Node: origin of the transport demand\ndestination::Node: destination of the transport demand\npaths::Array{Path, 1}: possible paths between origin and destination\nF: number of trips in p/year or t/year\n\n\n\n\n\n","category":"type"},{"location":"manual/types_and_functions/#Main.TransComp.Path","page":"Types and functions","title":"Main.TransComp.Path","text":"Path\n\nA 'Path' represents a possible route between two nodes. This sequence includes the nodes that are passed through and the length of the path.\n\nFields\n\nid::Int: unique identifier of the path\nname::String: name of the path\nlength::Float64: length of the path in km\nsequence: sequence of nodes and edges that are passed through\n\n\n\n\n\n","category":"type"},{"location":"manual/types_and_functions/#Main.TransComp.Product","page":"Types and functions","title":"Main.TransComp.Product","text":"Product\n\nA 'Product' represents either a good or a service that is being transported. This may include passengers, or different types of products in the freight transport. The differentiation of transported products related to the different needs for transportation and, therefore, different possible sets of transport modes, vehicle types and drivetrain technologies are available for transport.\n\nFields\n\nid::Int: unique identifier of the product\nname::String: name of the product\n\n\n\n\n\n","category":"type"},{"location":"manual/types_and_functions/#Main.TransComp.Regiontype","page":"Types and functions","title":"Main.TransComp.Regiontype","text":"Regiontype\n\nA 'Regiontype' describes a region based on its characteristics that induces differences in transportation needs (for example, urban vs. rural area).\n\nFields\n\nid::Int: unique identifier of the regiontype\nname::String: name of the regiontype\nspeed::Float64: average speed in km/h\ncosts_var::Array{Float64, 1}: variable costs in €/vehicle-km\ncosts_fix::Array{Float64, 1}: fixed costs in €/year\n\n\n\n\n\n","category":"type"},{"location":"manual/types_and_functions/#Main.TransComp.TechVehicle","page":"Types and functions","title":"Main.TransComp.TechVehicle","text":"TechVehicle\n\nA 'TechVehicle' represents a vehicle that is used for transportation. This includes the vehicle type, the technology used in the vehicle, the capital and maintenance costs, the load capacity, the specific consumption, the lifetime, the annual range, the number of vehicles of this type, the battery capacity, and the peak charging power.\n\n\n\n\n\n","category":"type"},{"location":"manual/types_and_functions/#Main.TransComp.TechVehicle_share_max","page":"Types and functions","title":"Main.TransComp.TechVehicle_share_max","text":"TechVehicle_share_max\n\nMaximum vehicle type shares of a TechVehicle independent of year, i.e. over total horizon.\n\nFields\n\nid::Int: unique identifier of the TechVehicle share\ntechvehicle::TechVehicle: TechVehicle\nshare::Float64: maximum share of the TechVehicle\nfinancial_status::Array{FinancialStatus, 1}: array of financial status that is affected by this TechVehicle share constraint\nregion_type::Array{Regiontype,1}: array of region types that are affected by this TechVehicle share constraint\n\n\n\n\n\n","category":"type"},{"location":"manual/types_and_functions/#Main.TransComp.TechVehicle_share_max_by_year","page":"Types and functions","title":"Main.TransComp.TechVehicle_share_max_by_year","text":"TechVehicle_share_max_by_year\n\nMaximum vehicle type shares of a TechVehicle in a specific year.\n\nFields\n\nid::Int: unique identifier of the TechVehicle share\ntechvehicle::TechVehicle: TechVehicle\nshare::Float64: maximum share of the TechVehicle\nyear::Int: year of the maximum TechVehicle share\nfinancial_status::Array{FinancialStatus, 1}: financial status that is affected by this TechVehicle share constraint\nregion_type::Array{Regiontype,1}: array of region types that are affected by this TechVehicle share constraint\n\n\n\n\n\n","category":"type"},{"location":"manual/types_and_functions/#Main.TransComp.TechVehicle_share_min","page":"Types and functions","title":"Main.TransComp.TechVehicle_share_min","text":"TechVehicle_share_min\n\nMinimum vehicle type shares of a TechVehicle independent of year, i.e. over total horizon.\n\nFields\n\nid::Int: unique identifier of the TechVehicle share\ntechvehicle::TechVehicle: TechVehicle\nshare::Float64: minimum share of the TechVehicle\nfinancial_status::Array{FinancialStatus, 1}: array of financial status that is affected by this TechVehicle share constraint\nregion_type::Array{Regiontype,1}: array of region types that are affected by this TechVehicle share constraint\n\n\n\n\n\n","category":"type"},{"location":"manual/types_and_functions/#Main.TransComp.TechVehicle_share_min_by_year","page":"Types and functions","title":"Main.TransComp.TechVehicle_share_min_by_year","text":"TechVehicle_share_min_by_year\n\nMinimum vehicle type shares of a TechVehicle in a specific year.\n\nFields\n\nid::Int: unique identifier of the TechVehicle share\ntechvehicle::TechVehicle: TechVehicle\nshare::Float64: minimum share of the TechVehicle\nyear::Int: year of the minimum TechVehicle share\nfinancial_status::Array{FinancialStatus, 1}: financial status that is affected by this TechVehicle share constraint\nregion_type::Array{Regiontype,1}: array of region types that are affected by this TechVehicle share constraint\n\n\n\n\n\n","category":"type"},{"location":"manual/types_and_functions/#Main.TransComp.Technology","page":"Types and functions","title":"Main.TransComp.Technology","text":"Technology\n\nA 'Technology' represents the drivetrain technology used in the vehicle.\n\nFields\n\nid::Int: unique identifier of the technology\nname::String: name of the technology\nfuel::Fuel: fuel used by the technology\n\n\n\n\n\n","category":"type"},{"location":"manual/types_and_functions/#Main.TransComp.Technology_share_max","page":"Types and functions","title":"Main.TransComp.Technology_share_max","text":"Technology_share_max\n\nMaximum technology shares of a vehicle technology independent of year, i.e. over total horizon.\n\nFields\n\nid::Int: unique identifier of the technology share\ntechnology::Technology: vehicle technology\nshare::Float64: maximum share of the technology\nfinancial_status::Array{FinancialStatus, 1}: array of financial status that is affected by this technology share constraint\nregion_type::Array{Regiontype,1}: array of region types that are affected by this TechVehicle share constraint\n\n\n\n\n\n","category":"type"},{"location":"manual/types_and_functions/#Main.TransComp.Technology_share_max_by_year","page":"Types and functions","title":"Main.TransComp.Technology_share_max_by_year","text":"Technology_share_max_by_year\n\nMaximum technology shares of a vehicle technology in a specific year.\n\nFields\n\nid::Int: unique identifier of the technology share\ntechnology::Technology: vehicle technology\nshare::Float64: maximum share of the technology\nyear::Int: year of the maximum technology share\nfinancial_status::Array{FinancialStatus, 1}: financial status that is affected by this technology share constraint\nregion_type::Array{Regiontype,1}: array of region types that are affected by this TechVehicle share constraint\n\n\n\n\n\n","category":"type"},{"location":"manual/types_and_functions/#Main.TransComp.Technology_share_min","page":"Types and functions","title":"Main.TransComp.Technology_share_min","text":"Technology_share_min\n\nMinimum technology shares of a vehicle technology independent of year, i.e. over total horizon.\n\nFields\n\nid::Int: unique identifier of the technology share\ntechnology::Technology: vehicle technology\nshare::Float64: minimum share of the technology\nfinancial_status::Array{FinancialStatus, 1}: array of financial status that is affected by this technology share constraint\nregion_type::Array{Regiontype,1}: array of region types that are affected by this TechVehicle share constraint\n\n\n\n\n\n","category":"type"},{"location":"manual/types_and_functions/#Main.TransComp.Technology_share_min_by_year","page":"Types and functions","title":"Main.TransComp.Technology_share_min_by_year","text":"Technology_share_min_by_year\n\nMinimum technology shares of a vehicle technology in a specific year.\n\nFields\n\nid::Int: unique identifier of the technology share\ntechnology::Technology: vehicle technology\nshare::Float64: minimum share of the technology\nyear::Int: year of the minimum technology share\nfinancial_status::Array{FinancialStatus, 1}: financial status that is affected by this technology share constraint\nregion_type::Array{Regiontype,1}: array of region types that are affected by this TechVehicle share constraint\n\n\n\n\n\n","category":"type"},{"location":"manual/types_and_functions/#Main.TransComp.Transportation_speeds","page":"Types and functions","title":"Main.TransComp.Transportation_speeds","text":"Transportation_speeds\n\nA 'Speed' describes the speed of a vehicle type in a specific year.\n\nFields\n\n\n\n\n\n","category":"type"},{"location":"manual/types_and_functions/#Main.TransComp.VehicleSubsidy","page":"Types and functions","title":"Main.TransComp.VehicleSubsidy","text":"VehicleSubsidy\n\nA 'VehicleSubsidy' describes the subsidy for a vehicle type in a specific year.\n\nFields\n\nid::Int: unique identifier of the subsidy\nname::String: name of the subsidy\nyears::Array{Int,1}: years in which the subsidy is valid\ntechvehicle::TechVehicle: vehicle type and technology\nsubsidy::Float64: subsidy in €\n\n\n\n\n\n","category":"type"},{"location":"manual/types_and_functions/#Main.TransComp.VehicleType_share_max","page":"Types and functions","title":"Main.TransComp.VehicleType_share_max","text":"VehicleType_share_max\n\nMaximum vehicle type shares of a vehicle type independent of year, i.e. over total horizon.\n\nFields\n\nid::Int: unique identifier of the vehicle type share\nvehicle_type::Vehicletype: vehicle type\nshare::Float64: maximum share of the vehicle type\nfinancial_status::Array{FinancialStatus, 1}: array of financial status that is affected by this vehicle type share constraint\nregion_type::Array{Regiontype,1}: array of region types that are affected by this TechVehicle share constraint\n\n\n\n\n\n","category":"type"},{"location":"manual/types_and_functions/#Main.TransComp.VehicleType_share_max_by_year","page":"Types and functions","title":"Main.TransComp.VehicleType_share_max_by_year","text":"VehicleType_share_max_by_year\n\nMaximum vehicle type shares of a vehicle type in a specific year.\n\nFields\n\nid::Int: unique identifier of the vehicle type share\nvehicle_type::Vehicletype: vehicle type\nshare::Float64: maximum share of the vehicle type\nyear::Int: year of the maximum vehicle type share\nfinancial_status::Array{FinancialStatus, 1}: financial status that is affected by this vehicle type share constraint\nregion_type::Array{Regiontype,1}: array of region types that are affected by this TechVehicle share constraint\n\n\n\n\n\n","category":"type"},{"location":"manual/types_and_functions/#Main.TransComp.VehicleType_share_min","page":"Types and functions","title":"Main.TransComp.VehicleType_share_min","text":"VehicleType_share_min\n\nMinimum vehicle type shares of a vehicle type independent of year, i.e. over total horizon.\n\nFields\n\nid::Int: unique identifier of the vehicle type share\nvehicle_type::Vehicletype: vehicle type\nshare::Float64: minimum share of the vehicle type\nfinancial_status::Array{FinancialStatus, 1}: array of financial status that is affected by this vehicle type share constraint\nregion_type::Array{Regiontype,1}: array of region types that are affected by this TechVehicle share constraint\n\n\n\n\n\n","category":"type"},{"location":"manual/types_and_functions/#Main.TransComp.VehicleType_share_min_by_year","page":"Types and functions","title":"Main.TransComp.VehicleType_share_min_by_year","text":"VehicleType_share_min_by_year\n\nMinimum vehicle type shares of a vehicle type in a specific year.\n\nFields\n\nid::Int: unique identifier of the vehicle type share\nvehicle_type::Vehicletype: vehicle type\nshare::Float64: minimum share of the vehicle type\nyear::Int: year of the minimum vehicle type share\nfinancial_status::Array{FinancialStatus, 1}: financial status that is affected by this vehicle type share constraint\nregion_type::Array{Regiontype,1}: array of region types that are affected by this TechVehicle share constraint\n\n\n\n\n\n","category":"type"},{"location":"manual/types_and_functions/#Main.TransComp.Vehicletype","page":"Types and functions","title":"Main.TransComp.Vehicletype","text":"Vehicletype\n\nA 'Vehicletype' represents a type of vehicle that is used for transportation. This may be for example, small passenger cars, buses, or light-duty trucks.\n\nFields\n\nid::Int: unique identifier of the vehicle type\nname::String: name of the vehicle type\nmode::Mode: mode of transport that the vehicle type is used for\nproduct::Product: product that the vehicle type is used for\n\n\n\n\n\n","category":"type"},{"location":"manual/types_and_functions/#Main.TransComp.base_define_variables-Tuple{JuMP.Model, Dict}","page":"Types and functions","title":"Main.TransComp.base_define_variables","text":"base_define_variables(model::Model, data_structures::Dict)\n\nDefines the variables for the model.\n\nArguments\n\nmodel::Model: JuMP model\ndata_structures::Dict: dictionary with the input data\n\n\n\n\n\n","category":"method"},{"location":"manual/types_and_functions/#Main.TransComp.check_folder_writable-Tuple{String}","page":"Types and functions","title":"Main.TransComp.check_folder_writable","text":"check_folder_writable(folder_path::String)\n\nCheck if the folder exists and can be written in.\n\nArguments\n\nfolder_path::String: The path to the folder.\n\n\n\n\n\n","category":"method"},{"location":"manual/types_and_functions/#Main.TransComp.check_input_file-Tuple{String}","page":"Types and functions","title":"Main.TransComp.check_input_file","text":"check_input_file(path_to_source_file::String)\n\nCheck if the input file exists and is a YAML file.\n\nArguments\n\npath_to_source_file::String: The path to the input file.\n\n\n\n\n\n","category":"method"},{"location":"manual/types_and_functions/#Main.TransComp.check_model_parametrization-Tuple{Dict, Vector{String}}","page":"Types and functions","title":"Main.TransComp.check_model_parametrization","text":"check_model_parametrization(data_dict::Dict, required_keys::Vector{String})\n\nCheck if the required keys are present in the model data.\n\nArguments\n\ndata_dict::Dict: The input data.\n\nReturns\n\nBool: True if the required keys are present, false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"manual/types_and_functions/#Main.TransComp.check_required_keys-Tuple{Dict, Vector{String}}","page":"Types and functions","title":"Main.TransComp.check_required_keys","text":"check_required_keys(data_dict::Dict, required_keys::Vector{String})\n\nCheck if the required keys are present in the input data.\n\nArguments\n\ndata_dict::Dict: The input data.\n\n\n\n\n\n","category":"method"},{"location":"manual/types_and_functions/#Main.TransComp.constraint_demand_coverage-Tuple{JuMP.Model, Any}","page":"Types and functions","title":"Main.TransComp.constraint_demand_coverage","text":"constraint_demand_coverage(model::JuMP.Model, data_structures::Dict)\n\nCreates constraint for demand coverage.\n\nArguments\n\nmodel::JuMP.Model: JuMP model\ndata_structures::Dict: dictionary with the input data\n\n\n\n\n\n","category":"method"},{"location":"manual/types_and_functions/#Main.TransComp.constraint_emissions_by_mode-Tuple{JuMP.Model, Dict}","page":"Types and functions","title":"Main.TransComp.constraint_emissions_by_mode","text":"constraint_emissions_by_mode(model::JuMP.Model, data_structures::Dict)\n\nEmissions given per mode for a specific year. Attention: This constraint may be a source for infeasibility if mode or technology shift cannot be achieved due to restrictions in the shift of modes (see parametrization of parameters alphaf and betaf), or due to the lifetimes of technologies as well as the lack of available low emission or zero emission technologies.\n\nArguments\n\nmodel::JuMP.Model: JuMP model\ndata_structures::Dict: dictionary with the input data\n\n\n\n\n\n","category":"method"},{"location":"manual/types_and_functions/#Main.TransComp.constraint_fueling_demand-Tuple{JuMP.Model, Dict}","page":"Types and functions","title":"Main.TransComp.constraint_fueling_demand","text":"constraint_fueling_demand(model::JuMP.Model, data_structures::Dict)\n\nConstraints for fueling demand at nodes and edges.\n\nArguments\n\nmodel::JuMP.Model: JuMP model\ndata_structures::Dict: dictionary with the input data\n\n\n\n\n\n","category":"method"},{"location":"manual/types_and_functions/#Main.TransComp.constraint_fueling_infrastructure-Tuple{JuMP.Model, Dict}","page":"Types and functions","title":"Main.TransComp.constraint_fueling_infrastructure","text":"constraint_vehicle_purchase(model::JuMP.Model, data_structures::Dict)\n\nConstraints for the sizing of fueling infrastructure at nodes and edges.\n\nArguments\n\nmodel::JuMP.Model: JuMP model\ndata_structures::Dict: dictionary with the input data\n\n\n\n\n\n","category":"method"},{"location":"manual/types_and_functions/#Main.TransComp.constraint_market_share-Tuple{JuMP.Model, Dict}","page":"Types and functions","title":"Main.TransComp.constraint_market_share","text":"constraint_market_share(model::JuMP.Model, data_structures::Dict)\n\nIf share are given for specific vehicle types, this function will create constraints for the newly bought vehicle share of vehicles the modes.\n\nArguments\n\nmodel::JuMP.Model: JuMP model\ndata_structures::Dict: dictionary with the input data\n\n\n\n\n\n","category":"method"},{"location":"manual/types_and_functions/#Main.TransComp.constraint_max_mode_share-Tuple{JuMP.Model, Dict}","page":"Types and functions","title":"Main.TransComp.constraint_max_mode_share","text":"constraint_max_mode_share(model::JuMP.Model, data_structures::Dict)\n\nIf share are given for specific modes, this function will create constraints for the share of the modes. When this constraint is active, it can be a source of infeasibility for the model as it may be not possible to reach certain mode shares due to restrictions in the shift of modes (see parametrization of parameters alphaf and betaf). Or when multiple constraints for the mode share are active.\n\nArguments\n\nmodel::JuMP.Model: JuMP model\ndata_structures::Dict: dictionary with the input data\n\n\n\n\n\n","category":"method"},{"location":"manual/types_and_functions/#Main.TransComp.constraint_min_mode_share-Tuple{JuMP.Model, Dict}","page":"Types and functions","title":"Main.TransComp.constraint_min_mode_share","text":"constraint_min_mode_share(model::JuMP.Model, data_structures::Dict)\n\nIf share are given for specific modes, this function will create constraints for the share of the modes. When this constraint is active, it can be a source of infeasibility for the model as it may be not possible to reach certain mode shares due to restrictions in the shift of modes (see parametrization of parameters alphaf and betaf). Or when multiple constraints for the mode share are active.\n\nArguments\n\nmodel::JuMP.Model: JuMP model\ndata_structures::Dict: dictionary with the input data\n\n\n\n\n\n","category":"method"},{"location":"manual/types_and_functions/#Main.TransComp.constraint_mode_infrastructure-Tuple{JuMP.Model, Dict}","page":"Types and functions","title":"Main.TransComp.constraint_mode_infrastructure","text":"constraintmodeinfrastructure(model::JuMP.Model, data_structures::Dict)\n\nConstraints for sizing of mode infrastructure at nodes and edges.\n\nArguments\n\nmodel::JuMP.Model: JuMP model\ndata_structures::Dict: dictionary with the input data\n\n\n\n\n\n","category":"method"},{"location":"manual/types_and_functions/#Main.TransComp.constraint_mode_share-Tuple{JuMP.Model, Dict}","page":"Types and functions","title":"Main.TransComp.constraint_mode_share","text":"constraint_mode_share(model::JuMP.Model, data_structures::Dict)\n\nIf share are given for specific modes, this function will create constraints for the share of the modes. When this constraint is active, it can be a source of infeasibility for the model as it may be not possible to reach certain mode shares due to restrictions in the shift of modes (see parametrization of parameters alphaf and betaf). Especially also when constraints for minimum/maximum mode shares are active.\n\nArguments\n\nmodel::JuMP.Model: JuMP model\ndata_structures::Dict: dictionary with the input data\n\n\n\n\n\n","category":"method"},{"location":"manual/types_and_functions/#Main.TransComp.constraint_mode_shift-Tuple{JuMP.Model, Dict}","page":"Types and functions","title":"Main.TransComp.constraint_mode_shift","text":"constraint_mode_shift(model::JuMP.Model, data_structures::Dict)\n\nConstraints for the rate of the mode shfit.\n\nArguments\n\nmodel::JuMP.Model: JuMP model\ndata_structures::Dict: dictionary with the input data\n\n\n\n\n\n","category":"method"},{"location":"manual/types_and_functions/#Main.TransComp.constraint_monetary_budget-Tuple{JuMP.Model, Dict}","page":"Types and functions","title":"Main.TransComp.constraint_monetary_budget","text":"constraint_vehicle_purchase(model::JuMP.Model, data_structures::Dict)\n\nCreates constraints for monetary budget for vehicle purchase by route.\n\nArguments\n\nmodel::JuMP.Model: JuMP model\ndata_structures::Dict: dictionary with the input data\n\n\n\n\n\n","category":"method"},{"location":"manual/types_and_functions/#Main.TransComp.constraint_vehicle_aging-Tuple{JuMP.Model, Dict}","page":"Types and functions","title":"Main.TransComp.constraint_vehicle_aging","text":"constraint_vehicle_aging(model::JuMP.Model, data_structures::Dict)\n\nCreates constraints for vehicle aging.\n\nArguments\n\nmodel::JuMP.Model: JuMP model\ndata_structures::Dict: dictionary with the input data\n\nReturns\n\nmodel::JuMP.Model: JuMP model with the constraints added\n\n\n\n\n\n","category":"method"},{"location":"manual/types_and_functions/#Main.TransComp.constraint_vehicle_sizing-Tuple{JuMP.Model, Dict}","page":"Types and functions","title":"Main.TransComp.constraint_vehicle_sizing","text":"constraint_vehicle_sizing(model::JuMP.Model, data_structures::Dict)\n\nCreates constraint for vehicle sizing.\n\nArguments\n\nmodel::JuMP.Model: JuMP model\ndata_structures::Dict: dictionary with the input data\n\n\n\n\n\n","category":"method"},{"location":"manual/types_and_functions/#Main.TransComp.constraint_vehicle_stock_shift-Tuple{JuMP.Model, Dict}","page":"Types and functions","title":"Main.TransComp.constraint_vehicle_stock_shift","text":"constraint_vehicle_stock_shift(model::JuMP.Model, data_structures::Dict)\n\nConstraints for vehicle stock turnover.\n\nArguments\n\nmodel::JuMP.Model: JuMP model\ndata_structures::Dict: dictionary with the input data\n\n\n\n\n\n","category":"method"},{"location":"manual/types_and_functions/#Main.TransComp.create_emission_price_along_path-Tuple{Path, Dict}","page":"Types and functions","title":"Main.TransComp.create_emission_price_along_path","text":"create_emission_price_along_path(k::Path, data_structures::Dict)\n\nCalculating the carbon price along a given route based on the regions that the path lies in. (currently simple calculation by averaging over all geometric items among the path).\n\nArguments\n\nk::Path: path\ndata_structures::Dict: dictionary with the input data \n\n\n\n\n\n","category":"method"},{"location":"manual/types_and_functions/#Main.TransComp.create_m_tv_pairs-Tuple{Vector{TechVehicle}, Vector{Mode}}","page":"Types and functions","title":"Main.TransComp.create_m_tv_pairs","text":"create_m_tv_pairs(techvehicle_list::Vector{TechVehicle}, mode_list::Vector{Mode})\n\nCreates a set of pairs of mode and techvehicle IDs.\n\nArguments\n\ntechvehicle_list::Vector{TechVehicle}: list of techvehicles\nmode_list::Vector{Mode}: list of modes\n\nReturns\n\nmtvpairs::Set: set of pairs of mode and techvehicle IDs\n\n\n\n\n\n","category":"method"},{"location":"manual/types_and_functions/#Main.TransComp.create_model-Tuple{Any, String}","page":"Types and functions","title":"Main.TransComp.create_model","text":"create_model(model::JuMP.Model, data_structures::Dict)\n\nDefinition of JuMP.model and adding of variables.\n\nArguments\n\nmodel::JuMP.Model: JuMP model\ndata_structures::Dict: dictionary with the input data and parsing of the input parameters\n\nReturns\n\nmodel::JuMP.Model: JuMP model with the variables added\ndata_structures::Dict: dictionary with the input data\n\n\n\n\n\n","category":"method"},{"location":"manual/types_and_functions/#Main.TransComp.create_p_r_k_e_set-Tuple{Vector{Odpair}}","page":"Types and functions","title":"Main.TransComp.create_p_r_k_e_set","text":"create_p_r_k_e_set(odpairs::Vector{Odpair})\n\nCreates a set of pairs of product, odpair, path, and element IDs.\n\nArguments\n\nodpairs::Vector{Odpair}: list of odpairs\n\nReturns\n\nprkepairs::Set: set of pairs of product, odpair, path, and element IDs\n\n\n\n\n\n","category":"method"},{"location":"manual/types_and_functions/#Main.TransComp.create_p_r_k_g_set-Tuple{Vector{Odpair}}","page":"Types and functions","title":"Main.TransComp.create_p_r_k_g_set","text":"create_p_r_k_g_set(odpairs::Vector{Odpair})\n\nCreates a set of pairs of product, odpair, path, and element IDs.\n\nArguments\n\nodpairs::Vector{Odpair}: list of odpairs\n\nReturns\n\nprkgpairs::Set: set of pairs of product, odpair, path, and element IDs\n\n\n\n\n\n","category":"method"},{"location":"manual/types_and_functions/#Main.TransComp.create_p_r_k_n_set-Tuple{Vector{Odpair}}","page":"Types and functions","title":"Main.TransComp.create_p_r_k_n_set","text":"create_p_r_k_n_set(odpairs::Vector{Odpair})\n\nCreates a set of pairs of product, odpair, path, and element IDs.\n\nArguments\n\nodpairs::Vector{Odpair}: list of odpairs\n\nReturns\n\nprknpairs::Set: set of pairs of product, odpair, path, and element IDs\n\n\n\n\n\n","category":"method"},{"location":"manual/types_and_functions/#Main.TransComp.create_p_r_k_set-Tuple{Vector{Odpair}}","page":"Types and functions","title":"Main.TransComp.create_p_r_k_set","text":"create_p_r_k_set(odpairs::Vector{Odpair})\n\nCreates a set of pairs of product, odpair, and path IDs.\n\nArguments\n\nodpairs::Vector{Odpair}: list of odpairs\n\nReturns\n\nprk_pairs::Set: set of pairs of product, odpair, and path IDs\n\n\n\n\n\n","category":"method"},{"location":"manual/types_and_functions/#Main.TransComp.create_r_k_set-Tuple{Vector{Odpair}}","page":"Types and functions","title":"Main.TransComp.create_r_k_set","text":"create_r_k_set(odpairs::Vector{Odpair})\n\nCreates a set of pairs of odpair and path IDs.\n\nArguments\n\nodpairs::Vector{Odpair}: list of odpairs\n\nReturns\n\nrkpairs::Set: set of pairs of odpair and path IDs\n\n\n\n\n\n","category":"method"},{"location":"manual/types_and_functions/#Main.TransComp.create_tv_id_set-Tuple{Vector{TechVehicle}, Vector{Mode}}","page":"Types and functions","title":"Main.TransComp.create_tv_id_set","text":"create_tv_id_set(techvehicle_list::Vector{TechVehicle}, mode_list::Vector{Mode})\n\nCreates a list of techvehicle IDs.\n\nArguments\n\ntechvehicle_list::Vector{TechVehicle}: list of techvehicles\nmode_list::Vector{Mode}: list of modes\n\nReturns\n\ntechvehicleids2::Set: set of techvehicle IDs\n\n\n\n\n\n","category":"method"},{"location":"manual/types_and_functions/#Main.TransComp.create_v_t_set-Tuple{Vector{TechVehicle}}","page":"Types and functions","title":"Main.TransComp.create_v_t_set","text":"create_v_t_set(techvehicle_list::Vector{TechVehicle})\n\nCreates a set of pairs of techvehicle IDs.\n\nArguments\n\ntechvehicle_list::Vector{TechVehicle}: list of techvehicles\n\nReturns\n\ntvpairs::Set: set of pairs of techvehicle IDs\n\n\n\n\n\n","category":"method"},{"location":"manual/types_and_functions/#Main.TransComp.depreciation_factor-Tuple{Any, Any}","page":"Types and functions","title":"Main.TransComp.depreciation_factor","text":"depreciation_factor(y, g)\n\nCalculate the depreciation factor for a vehicle based on its age.\n\nArguments\n\ny::Int: The year of the vehicle.\ng::Int: The year the vehicle was purchased.\n\nReturns\n\nFloat64: The depreciation factor.\n\n\n\n\n\n","category":"method"},{"location":"manual/types_and_functions/#Main.TransComp.get_input_data-Tuple{String}","page":"Types and functions","title":"Main.TransComp.get_input_data","text":"get_input_data(path_to_source_file::String)\n\nThis function reads the input data and checks requirements for the content of the file.\n\nArguments\n\npathtosource_file::String: path to the source file\n\nReturns\n\ndata_dict::Dict: dictionary with the input data\n\n\n\n\n\n","category":"method"},{"location":"manual/types_and_functions/#Main.TransComp.objective-Tuple{JuMP.Model, Dict}","page":"Types and functions","title":"Main.TransComp.objective","text":"objective(model::Model, data_structures::Dict)\n\nDefinition of the objective function for the optimization model.\n\nArguments\n\nmodel::Model: JuMP model\ndata_structures::Dict: dictionary with the input data\n\n\n\n\n\n","category":"method"},{"location":"manual/types_and_functions/#Main.TransComp.parse_data-Tuple{Dict}","page":"Types and functions","title":"Main.TransComp.parse_data","text":"parse_data(data_dict::Dict)\n\nParses the input data into the corresponding parameters in struct format from structs.jl.\n\nArguments\n\ndata_dict::Dict: dictionary with the input data\n\nReturns\n\ndata_structures::Dict: dictionary with the parsed data\n\n\n\n\n\n","category":"method"},{"location":"manual/types_and_functions/#Main.TransComp.save_results-Tuple{JuMP.Model, String, String}","page":"Types and functions","title":"Main.TransComp.save_results","text":"save_results(model::Model, case_name::String)\n\nSaves the results of the optimization model to YAML files.\n\nArguments\n\nmodel::Model: JuMP model\ncase_name::String: name of the case\nfileforresults::String: name of the file to save the results\n\n\n\n\n\n","category":"method"},{"location":"manual/quick-start/#Quick-start","page":"Quick Start","title":"Quick start","text":"","category":"section"},{"location":"manual/quick-start/","page":"Quick Start","title":"Quick Start","text":"In the following, you will find an explanation of how get the TransComp model to run.","category":"page"},{"location":"manual/quick-start/#Prequisits","page":"Quick Start","title":"Prequisits","text":"","category":"section"},{"location":"manual/quick-start/","page":"Quick Start","title":"Quick Start","text":"Make sure you have Julia installed and a suitable solver for optimization problem (for example, Gurobi).","category":"page"},{"location":"manual/quick-start/","page":"Quick Start","title":"Quick Start","text":"Required packages are specified in Projecttoml. By including the file srcTransCompjl which contains module TransComp. Its functionalities can be imported to your .jl script or Julia bash vie using TransComp.","category":"page"},{"location":"#TransComp-Documentation","page":"Home","title":"TransComp Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation for the TransComp package. This package provides tools for transportation modeling and optimization.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The Transcomp model is a linear optimization model developed within the EU Horizon project iDesignRES in workpage 1. It is implemented in Julia and is based on the JuMP package. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The Transcomp model is aimed at modeling developments in subsectors of the transport sector. It is designed in a way that it can be adoptable in its complexity in the representation of the transport sector - being flexible in its ability to adjust in to the level of availibility of granular data - and being costumizable in the scope if representation of the the transport sector, i.e. included transport segments. Further, features are provided that allow the soft linking to traditional transport models and energy system models.","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"manual/quickstart.md\"\n    ]\nDepth=1","category":"page"},{"location":"manual/input_data/#Input-data","page":"Preparation of input data","title":"Input data","text":"","category":"section"},{"location":"manual/input_data/","page":"Preparation of input data","title":"Preparation of input data","text":"The input file is defined as one YAML.","category":"page"},{"location":"manual/input_data/","page":"Preparation of input data","title":"Preparation of input data","text":"Model:\n  y_init: 2020          # first year of model horizon\n  Y: 31                 # number of modeled years\n  pre_y: 25             # number of years before y_init to be considered for generation of the vehicle stock\n  gamma: 0.001          # factor for sizing infrastructure (ratio between total yearly demand and peak demand)\n  alpha_f: 0.1          # parameter for constraining rate of mode shift (optional) | default: 0.1\n  beta_f: 0.1           # parameter for constraining rate of mode shift (optional) | default: 0.1\n  alpha_h: 0.1          # parameter for constraining rate of technology shift (optional) | default: 0.1\n  beta_h: 0.1           # parameter for constraining rate of technology shift (optional) | default: 0.1","category":"page"},{"location":"manual/input_data/","page":"Preparation of input data","title":"Preparation of input data","text":"In this sample file, the optimization is performed for the years 2020 until 2050 with 31 time steps in total. If a stock of vehicles is explicitly considered, pre_y indicates the earliest generation of vehicles considered. In this case, the oldest vehicles that are considered have been introduced to the vehicle stock in 1996 as this was chosen as the maximum lifetime here. ","category":"page"},{"location":"manual/input_data/","page":"Preparation of input data","title":"Preparation of input data","text":"For further explenation of variables alpha_f, beta_f,alpha_h, beta_h and gamma, please refer to the mathematical formulation of the model.","category":"page"},{"location":"manual/input_data/","page":"Preparation of input data","title":"Preparation of input data","text":"Other entries of the input file must include data inputs for the following data structures:","category":"page"},{"location":"manual/input_data/","page":"Preparation of input data","title":"Preparation of input data","text":"GeographicElement\nMode\nProduct\nPath\nFuel\nTechnology\nVehicletype\nTechVehicle\nInitialVehicleStock\nInitialFuelingInfr\nInitialModeInfr\nFinancialStatus \nRegiontype\nOdpair\nSpeed","category":"page"},{"location":"manual/input_data/","page":"Preparation of input data","title":"Preparation of input data","text":"Specifations for this are in manual/types.md.","category":"page"},{"location":"manual/input_data/","page":"Preparation of input data","title":"Preparation of input data","text":"For each of these data types, a list with is added - as in the upcoming ","category":"page"},{"location":"manual/input_data/","page":"Preparation of input data","title":"Preparation of input data","text":"Mode:\n- id: 1\n  name: road-car\n  quantify_by_vehs: true\n- id: 2\n  name: public_transport\n  quantify_by_vehs: false","category":"page"},{"location":"manual/input_data/","page":"Preparation of input data","title":"Preparation of input data","text":"Here, two travel modes are specified. The first one is modeled based on its vehicle stock.","category":"page"},{"location":"manual/how-to-use/#How-to-use?","page":"How to use?","title":"How to use?","text":"","category":"section"},{"location":"manual/how-to-use/","page":"How to use?","title":"How to use?","text":"In the following, we describe the purposeful usage of the model.","category":"page"},{"location":"manual/how-to-use/#Preliminary-knowledge-for-usage","page":"How to use?","title":"Preliminary knowledge for usage","text":"","category":"section"},{"location":"manual/how-to-use/","page":"How to use?","title":"How to use?","text":"Given the complex nature of transport systems that is highly variable in different spatial environments and geography, the user should have some experience with the formulation and application of optimization models. In preparation to the application, we urge to familiarize yourself with the content of the Model design chapter. A mathematical formulation of the model can be found in the repository in math/mathematical_formulation.pdf.","category":"page"},{"location":"manual/how-to-use/#Design-of-a-case-study","page":"How to use?","title":"Design of a case study","text":"","category":"section"},{"location":"manual/how-to-use/","page":"How to use?","title":"How to use?","text":"In designing and quantifying a case study for the transport component model, the following questions need to be addressed:","category":"page"},{"location":"manual/how-to-use/","page":"How to use?","title":"How to use?","text":"What region is modeled and at which geographic resolution? The model has been previously applied at NUTS-2 and NUTS-3 level (more information on NUTS classification here).\nWhat temporal horizon is modelled? The suggested modeling horizon is at least five years to find implications for modal and technological shift.\nWhich transport modes, drivetrain technologies and fuels are part of the analysis? \nHow granular are the modes modeled? Based on vehicle stock investments or using levelized costs representing the total costs of a mode? This decision depends on the desired granularity of the analysis as well as available data.","category":"page"},{"location":"manual/how-to-use/#Preparing-input-data","page":"How to use?","title":"Preparing input data","text":"","category":"section"},{"location":"manual/how-to-use/","page":"How to use?","title":"How to use?","text":"The input data is in JAML format. The minimal required input data and its format is defined in Input data.","category":"page"}]
}
