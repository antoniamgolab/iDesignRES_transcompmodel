name: CI
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Since EnergyModelsBase doesn't have binary dependencies,
        # only test on a subset of possible platforms.
        include:
          - version: '1'  # The latest point-release (Linux)
            os: ubuntu-latest
            arch: x64
          - version: '1'  # The latest point-release (Windows)
            os: windows-latest
            arch: x64
          - version: 'lts'  # lts 
            os: ubuntu-latest
            arch: x64
          - version: 'lts'  # lts
            os: windows-latest
            arch: x64
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: actions/cache@v3
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - uses: julia-actions/julia-buildpkg@v1
      - name: Activate environment and install dependencies
        run: |
          # Activate the main project environment (root Project.toml)
          julia --project=./ -e 'using Pkg; Pkg.instantiate(); Pkg.precompile()'

          # Optionally, activate the test environment if it's in a separate folder
          julia --project=./test -e 'using Pkg; Pkg.instantiate(); Pkg.precompile()'

      - name: Run tests
        uses: julia-actions/julia-runtest@v1
        with:
          depwarn: error
      
      - name: Format Julia Code with JuliaFormatter.jl
        run: |
          julia --project=./ -e 'using JuliaFormatter; JuliaFormatter.format("**/*.jl")'
